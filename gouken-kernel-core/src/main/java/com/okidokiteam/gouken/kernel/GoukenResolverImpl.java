package com.okidokiteam.gouken.kernel;import java.io.InputStream;import javax.inject.Inject;import com.okidokiteam.gouken.ArtifactReference;import com.okidokiteam.gouken.GoukenResolver;import org.ops4j.pax.repository.Index;import org.ops4j.pax.repository.Mapping;import org.ops4j.pax.repository.Provider;import org.ops4j.pax.repository.RepositoryException;import org.ops4j.pax.repository.maven.GAV;/** * Specific implementation. * Here's also where you wire up the whole Pax Repository runtime stuff. * This one uses Guice and the (shipped with Pax Repository) Guice Modules for tight configuration. * * TODO: Replaced by {@code MappingResolver} from Pax Repo ? */public class GoukenResolverImpl implements GoukenResolver {    final private Index<GAV,GAV,InputStream> m_index;    final private Mapping<String,GAV> m_parser;    @Inject    GoukenResolverImpl( Index<GAV,GAV,InputStream>  index, Mapping<String,GAV> parser )    {        m_index = index;        m_parser = parser;    }    public Provider<InputStream> find( ArtifactReference ref )        throws RepositoryException    {        // convert ref to gav type.        // parse the instruction using a default maven string parser:        GAV gav = m_parser.parse( ref.name() );                return m_index.get( gav );    }}
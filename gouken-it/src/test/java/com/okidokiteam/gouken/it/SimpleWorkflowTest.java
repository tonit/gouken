package com.okidokiteam.gouken.it;import java.io.InputStream;import com.google.inject.AbstractModule;import com.google.inject.Guice;import com.google.inject.Injector;import com.google.inject.Key;import com.google.inject.Module;import com.google.inject.TypeLiteral;import com.google.inject.util.Providers;import com.okidokiteam.gouken.GoukenResolver;import com.okidokiteam.gouken.KernelException;import com.okidokiteam.gouken.KernelWorkflowException;import com.okidokiteam.gouken.Vault;import com.okidokiteam.gouken.VaultSettings;import com.okidokiteam.gouken.kernel.Application;import com.okidokiteam.gouken.kernel.CleanAnonymousSettings;import com.okidokiteam.gouken.kernel.CoreVaultProvider;import com.okidokiteam.gouken.kernel.GoukenResolverImpl;import com.okidokiteam.gouken.simpleagent.SimpleAgentModule;import com.okidokiteam.gouken.simpleagent.api.MyPush;import org.junit.Test;import org.ops4j.pax.repository.Provider;import org.ops4j.pax.repository.base.helpers.UncachedProvider;import org.ops4j.pax.repository.guice.MavenModule;import org.ops4j.pax.repository.guice.RepositoryBaseModule;import org.ops4j.pax.repository.guice.TarballModule;import static com.google.inject.name.Names.*;/** * This is about how it all fits together using raw corevault (and not one of the assemblies) * * Steps: * - Create a Guice Injector wiring up all the Modules * - get the vault and launch. */public class SimpleWorkflowTest {    @Test    public void testSimpleWorkflowTest()        throws KernelWorkflowException, KernelException    {        Application<MyPush> app = bootVault( setup( "/" ) );        MyPush push = app.getVault().start( app.getAgent() );        push.say("Hi!");                app.getVault().stop();    }    private Application<MyPush> bootVault( Module setup )    {        Injector injector = Guice.createInjector( setup );        return injector.getInstance( Key.get( new TypeLiteral<Application<MyPush>>() {}));    }    private Module setup( final String repoSource )    {        return new AbstractModule() {            @Override            protected void configure()            {                install( new SimpleAgentModule() );                install( new RepositoryBaseModule() );                //install( new TarballModule() );                install( new MavenModule() );                bind ( GoukenResolver.class).to( GoukenResolverImpl.class );                bind ( VaultSettings.class).to( CleanAnonymousSettings.class);                bind( new TypeLiteral<Provider<InputStream>>() {}).annotatedWith( named( "repository" ) ).toInstance( new UncachedProvider<InputStream>( getClass().getResourceAsStream( repoSource ) ) );                // Thanks to http://code.google.com/p/google-guice/issues/detail?id=519                com.google.inject.Provider provider = Providers.guicify( new CoreVaultProvider<MyPush>( MyPush.class ) );                bind( new TypeLiteral<Vault<MyPush>>() {}).toProvider( provider ).asEagerSingleton();                bind ( new TypeLiteral<Application<MyPush>>() {} );            }        };    }}